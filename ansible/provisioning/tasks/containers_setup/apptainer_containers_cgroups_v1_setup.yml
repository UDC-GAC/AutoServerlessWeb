- name: General containers setup
  block:
    - name: Create images directory
      file:
        path: "{{ installation_path }}/images"
        state: directory

    - name: Copy apptainer containers cgroup config
      template:
        src: "templates/{{ cgroups_file }}"
        dest: "{{ installation_path }}/{{ cgroups_file }}"

    ## Fix to get the right permissions on cgroups files
    - name: Copy cgroups v1 permission changer script
      copy:
        src: scripts/change_cgroupsv1_permissions.py
        dest: "{{ installation_path }}/change_cgroupsv1_permissions.py"
        mode: preserve

    # TODO: Run only when hadoop is used (app_type == hadoop_app)
    # So far it works because only one app_jar is specified when using hadoop
    - name: Copy necessary files for hadoop apps
      delegate_to: localhost
      when: "app_type == 'hadoop_app'"
      copy:
        src: "apps/{{ app_type }}/{{ item }}"
        dest: "{{ installation_path }}/apps/{{ app_type }}/"
      with_items:
        - setup.sh
        - java_snitch.sh
        - files_dir
      tags: never, create_app

- name: Check if base app image already exists
  delegate_to: localhost
  run_once: yes
  stat:
    path: "{{ installation_path }}/apps/{{ app_base_name }}/{{ app_base_image_file }}"
    get_checksum: false
    get_mime: false
    get_attributes: false
  register: stat_output
  tags: create_app

- name: Build base app
  block:
    - name: Create app base directory in server
      delegate_to: localhost
      run_once: yes
      file:
        path: "{{ installation_path }}/apps/{{ app_base_name }}"
        state: directory

    - name: Copy base app definition file
      delegate_to: localhost
      run_once: yes
      template:
        src: "templates/apps/{{ base_definition_file }}"
        dest: "{{ installation_path }}/apps/{{ app_base_name }}/{{ base_definition_file }}"

    - name: Build base app image
      delegate_to: localhost
      run_once: yes
      shell: "{{ singularity_command_alias }} build apps/{{ app_base_name }}/{{ app_base_image_file }} apps/{{ app_base_name }}/{{ base_definition_file }}"
      args:
        chdir: "{{ installation_path }}"
        executable: /bin/bash
        creates: "apps/{{ app_base_name }}/{{ app_base_image_file }}"
  tags: create_app
  when: not stat_output.stat.exists

- name: Check if app image already exists
  stat:
    path: "{{ installation_path }}/images/{{ image_file }}"
    get_checksum: false
    get_mime: false
    get_attributes: false
  register: stat_output
  tags: create_app

- name: Build runnable app on top of the base app image
  block:
    - name: Create app directory in server
      delegate_to: localhost
      run_once: yes
      file:
        path: "{{ installation_path }}/{{ app_directory }}"
        state: directory

    # - name: Create app directory in host
    #   file:
    #     path: "{{ installation_path }}/{{ app_directory }}"
    #     state: directory

    - name: Copy app definition file
      delegate_to: localhost
      run_once: yes
      template:
        src: "templates/apps/{{ definition_file }}"
        dest: "{{ installation_path }}/{{ app_directory }}/{{ definition_file }}"

    # - name: Copy app directory
    #   delegate_to: localhost
    #   run_once: yes
    #   when: "app_directory != ''"
    #   copy:
    #     src: "{{ app_directory }}/"
    #     dest: "{{ installation_path }}/apps/{{ app_name }}/"

    - name: Copy app install script if applicable
      delegate_to: localhost
      run_once: yes
      when: install_script is defined and install_script != ''
      copy:
        src: "{{ app_directory }}/{{ install_script }}"
        dest: "{{ installation_path }}/{{ app_directory }}/"

    - name: Copy files from optional directory if applicable
      block:
        - name: Copy app optional files directory
          delegate_to: localhost
          run_once: yes
          copy:
            src: "{{ app_directory }}/{{ files_dir }}"
            dest: "{{ installation_path }}/{{ app_directory }}/"

        - name: Find config files to template in the app directory
          delegate_to: localhost
          run_once: yes
          find:
            paths: "{{ app_directory }}/{{ files_dir }}"
            recurse: yes
          register: found_config_files

        - name: Process template for each config file
          delegate_to: localhost
          run_once: yes
          template:
            src: "{{ item.path }}"
            dest: "{{ installation_path }}/{{ app_directory }}/{{ files_dir }}/{{ item.path | regex_replace('^' + app_directory + '/' + files_dir, '') }}"
          loop: "{{ found_config_files.files }}"
      when: files_dir is defined and files_dir != ''

    - name: Build app image
      delegate_to: localhost
      run_once: yes
      shell: "{{ singularity_command_alias }} build {{ app_directory }}/{{ image_file }} {{ app_directory }}/{{ definition_file }}"
      args:
        chdir: "{{ installation_path }}"
        executable: /bin/bash
        creates: "{{ app_directory }}/{{ image_file }}"

    - name: Copy app image to host
      copy:
        src: "{{ installation_path }}/{{ app_directory }}/{{ image_file }}"
        dest: "{{ installation_path }}/images/"
        mode: preserve
  tags: create_app
  when: not stat_output.stat.exists

- name: Containers startup
  block:
    - name: Create directories to bind to containers
      shell: "
      {% for item in containers_info %}
        {% if item.host == inventory_hostname %}
          {% set bind_dir = item.disk_path + '/' + bind_dir_name if item.disk_path is defined else default_bind_path + '/' + bind_dir_name %}
          mkdir -p {{ bind_dir }}/{{ item.container_name }} &&
        {% endif %}
      {% endfor %}true"
      args:
        executable: /bin/bash

    - name: Check containers status
      shell: "sudo {{ singularity_command_alias }} instance list -j"
      args:
        executable: /bin/bash
      register: apptainer_list_output

    - name: Start apptainer containers
      shell: "
      {% for item in containers_info %}
        {% if item.host == inventory_hostname and item.container_name not in apptainer_list_output.stdout %}
          {% set bind_dir = item.disk_path + '/' + bind_dir_name if item.disk_path is defined else default_bind_path + '/' + bind_dir_name %}
          sudo {{ singularity_command_alias }} instance start -C --net --network {{ mode }}_{{ inventory_hostname }}{{ extra_connection }} --hostname {{ item.container_name }} --apply-cgroups {{ cgroups_file }} --bind {{ bind_dir }}/{{ item.container_name }}:{{ bind_dir_on_container }} images/{{ image_file }} {{ item.container_name }} && 
        {% endif  %}
      {% endfor %}true"
      args:
        chdir: "{{ installation_path }}"
        executable: /bin/bash
      vars:
        extra_connection: "{{ ',ptp' if mode == 'ipvlan' else '' }}"

    - name: Get containers PID mapping on each host
      when: "power_budgeting"
      shell: "
        {% for item in containers_info %}
          {% if item.host == inventory_hostname and item.container_name not in apptainer_list_output.stdout %}
            echo -n \"{{ item.container_name }}:$(sudo {{ singularity_command_alias }} instance list {{ item.container_name }} | grep {{ item.container_name }} | awk '{print $2}'),\" &&
          {% endif %}
        {% endfor %}true"
      args:
        chdir: "{{ installation_path }}"
        executable: /bin/bash
      register: container_pid_output

    - name: Declare containers PID mapping on each host
      when: "power_budgeting"
      set_fact:
        containers_pid_mapping: "{{ container_pid_output.stdout | default('') }}"

    - name: Concatenate all hosts PID mapping
      delegate_to: localhost
      run_once: yes
      when: "power_budgeting"
      set_fact:
        all_containers_pid_mapping: "{{ all_containers_pid_mapping | default('') + hostvars[item].containers_pid_mapping }}"
      loop: "{{ groups['nodes'] }}"

    - name: Write containers PID mapping
      delegate_to: localhost
      run_once: yes
      when: "power_budgeting and all_containers_pid_mapping != ''"
      lineinfile:
        path: "{{ containers_pid_mapping_file }}"
        line: "{{ item }}"
        create: yes
      loop: "{{ all_containers_pid_mapping[:-1].split(',') }}"

    - name: Clean apptainer containers bind directory
      shell: "
      {% for item in containers_info %}
        {% if item.host == inventory_hostname and item.container_name not in apptainer_list_output.stdout %}
          {% set bind_dir = item.disk_path + '/' + bind_dir_name if item.disk_path is defined else default_bind_path + '/' + bind_dir_name %}
          sudo {{ singularity_command_alias }} exec instance://{{ item.container_name }} bash -c 'rm -rf  {{ bind_dir_on_container }}/*' &&
        {% endif  %}
      {% endfor %}true"
      args:
        chdir: "{{ installation_path }}"
        executable: /bin/bash

    - name: Setup host resolution in containers and change cgroups v1 permissions
      shell: "
      {% for item in containers_info %}
        {% if item.host == inventory_hostname %}
          {% set bind_dir = item.disk_path + '/' + bind_dir_name if item.disk_path is defined else default_bind_path + '/' + bind_dir_name %}
           cp /etc/hosts {{ bind_dir }}/{{ item.container_name }}/hosts \
           && sudo {{ singularity_command_alias }} exec instance://{{ item.container_name }} bash -c \
           'echo {{ server_ip }} opentsdb >> /etc/hosts \
           && cat {{ bind_dir_on_container }}/hosts >> /etc/hosts \
           && rm {{ bind_dir_on_container }}/hosts' \
           && python3 change_cgroupsv1_permissions.py {{ singularity_command_alias }} {{ singularity_cgroups_group }} {{ item.container_name }} &&
        {% endif  %}
      {% endfor %}true"
      args:
        chdir: "{{ installation_path }}"
        executable: /bin/bash

  tags: start_containers
