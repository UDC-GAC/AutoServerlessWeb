- name: General containers setup
  block:
    - name: Create images directory
      file:
        path: "{{ installation_path }}/images"
        state: directory

    - name: Copy apptainer containers cgroup config
      template:
        src: "templates/{{ cgroups_file }}"
        dest: "{{ installation_path }}/{{ cgroups_file }}"

    ## Fix to get the right permissions on cgroups files
    - name: Copy cgroups v1 permission changer script
      copy:
        src: scripts/change_cgroupsv1_permissions.py
        dest: "{{ installation_path }}/change_cgroupsv1_permissions.py"
        mode: preserve

    # TODO: Run only when hadoop is used (app_name == hadoop)
    # So far it works because only one app_jar is specified when using hadoop
#    - name: Copy necessary files for hadoop apps
#      delegate_to: localhost
#      when: "app_jar != ''"
#      copy:
#        src: "apps/hadoop/{{ item }}"
#        dest: "{{ installation_path }}/apps/hadoop/"
#      with_items:
#        - setup.sh
#        - java_snitch.sh
#        - files_dir
#      tags: never, create_app

- name: Check if base app image already exists
  stat:
    path: "{{ installation_path }}/apps/{{ app_base_name }}/{{ app_base_image_file }}"
    get_checksum: false
    get_mime: false
    get_attributes: false
  register: stat_output

- name: Build base app
  block:
    - name: Create app base directory
      delegate_to: localhost
      run_once: yes
      file:
        path: "{{ installation_path }}/apps/{{ app_base_name }}"
        state: directory
      tags: create_app

    - name: Copy base app definition file
      delegate_to: localhost
      template:
        src: "templates/apps/base/{{ base_definition_file }}"
        dest: "{{ installation_path }}/apps/{{ app_base_name }}/{{ base_definition_file }}"
      tags: create_app

    - name: Build base app image
      delegate_to: localhost
      shell: "{{ singularity_command_alias }} build apps/{{ app_base_name }}/{{ app_base_image_file }} apps/{{ app_base_name }}/{{ base_definition_file }}"
      args:
        chdir: "{{ installation_path }}"
        executable: /bin/bash
        creates: "apps/{{ app_base_name }}/{{ app_base_image_file }}"
      tags: create_app

  when: not stat_output.stat.exists

- name: Check if app image already exists
  stat:
    path: "{{ installation_path }}/images/{{ image_file }}"
    get_checksum: false
    get_mime: false
    get_attributes: false
  register: stat_output

- name: Build runnable app on top of the base app image
  block:
    - name: Create app directory
      delegate_to: localhost
      run_once: yes
      file:
        path: "{{ installation_path }}/apps/{{ app_name }}"
        state: directory
      tags: create_app

    - name: Copy app definition file
      delegate_to: localhost
      template:
        src: "templates/apps/runnable/{{ definition_file }}"
        dest: "{{ installation_path }}/apps/{{ app_name }}/"
      tags: create_app

    - name: Copy app files directory
      delegate_to: localhost
      when: "app_files_dir != ''"
      copy:
        src: "{{ app_files_dir }}/"
        dest: "{{ installation_path }}/apps/{{ app_name }}/"
      tags: create_app

    - name: Find config files in the app directory
      delegate_to: localhost
      find:
        paths: "{{ app_files_dir }}/files_dir"
        recurse: no
      register: found_config_files
      tags: create_app

    - name: Process template for each config file
      delegate_to: localhost
      template:
        src: "{{ item.path }}"
        dest: "{{ installation_path }}/apps/{{ app_name }}/files_dir/{{ item.path | basename }}"
      loop: "{{ found_config_files.files }}"
      tags: create_app

    - name: Build app image
      delegate_to: localhost
      shell: "{{ singularity_command_alias }} build apps/{{ app_name }}/{{ image_file }} apps/{{ app_name }}/{{ definition_file }}"
      args:
        chdir: "{{ installation_path }}"
        executable: /bin/bash
        creates: "apps/{{ app_name }}/{{ image_file }}"
      tags: create_app

    - name: Copy app image to host
      copy:
        src: "{{ installation_path }}/apps/{{ app_name }}/{{ image_file }}"
        dest: "{{ installation_path }}/images/"
        mode: preserve
  when: not stat_output.stat.exists

- name: Containers startup
  block:
    - name: Create directories to bind to containers
      shell: "
      {% for item in containers_info %}
        {% if item.host == inventory_hostname %}
          {% set bind_dir = item.disk_path + '/' + bind_dir_name if item.disk_path is defined else default_bind_path + '/' + bind_dir_name %}
          {% if item.disk is defined and item.disk.startswith('ssd') %}
            mkdir -p {{ ssd_host_path }}/{{ item.container_name }} &&
            mkdir -p {{ bind_dir }} &&
            ln -sf {{ ssd_host_path }}/{{ item.container_name }} {{ bind_dir }}/ &&
          {% else %}
            mkdir -p {{ bind_dir }}/{{ item.container_name }} &&
          {% endif %}
        {% endif %}
      {% endfor %}true"
      args:
        executable: /bin/bash

    - name: Check containers status
      shell: "sudo {{ singularity_command_alias }} instance list -j"
      args:
        executable: /bin/bash
      register: apptainer_list_output

    - name: Start apptainer containers
      shell: "
      {% for item in containers_info %}
        {% if item.host == inventory_hostname and item.container_name not in apptainer_list_output.stdout %}
          {% set bind_dir = item.disk_path + '/' + bind_dir_name if item.disk_path is defined else default_bind_path + '/' + bind_dir_name %}
          sudo {{ singularity_command_alias }} instance start -C --net --network {{ mode }}_{{ inventory_hostname }}{{ extra_connection }} --hostname {{ item.container_name }} --apply-cgroups {{ cgroups_file }} --bind {{ bind_dir }}/{{ item.container_name }}:{{ bind_dir_on_container }} images/{{ image_file }} {{ item.container_name }} && 
        {% endif  %}
      {% endfor %}true"
      args:
        chdir: "{{ installation_path }}"
        executable: /bin/bash
      vars:
        extra_connection: "{{ ',ptp' if mode == 'ipvlan' else '' }}"

    - name: Setup host resolution in containers and change cgroups v1 permissions
      shell: "
      {% for item in containers_info %}
        {% if item.host == inventory_hostname %}
          {% set bind_dir = item.disk_path + '/' + bind_dir_name if item.disk_path is defined else default_bind_path + '/' + bind_dir_name %}
           cp /etc/hosts {{ bind_dir }}/{{ item.container_name }}/hosts \
           && sudo {{ singularity_command_alias }} exec instance://{{ item.container_name }} bash -c \
           'echo {{ server_ip }} opentsdb >> /etc/hosts \
           && cat {{ bind_dir_on_container }}/hosts >> /etc/hosts \
           && echo 127.0.0.1 $(hostname) >> /etc/hosts \
           && rm {{ bind_dir_on_container }}/hosts' \
           && python3 change_cgroupsv1_permissions.py {{ singularity_command_alias }} {{ singularity_cgroups_group }} {{ item.container_name }} &&
        {% endif  %}
      {% endfor %}true"
      args:
        chdir: "{{ installation_path }}"
        executable: /bin/bash

  tags: start_containers