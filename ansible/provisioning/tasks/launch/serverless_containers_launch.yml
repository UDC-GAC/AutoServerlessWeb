
# Initializing State Database
- name: Check existing tables in CouchDB
  shell: "curl -u admin:{{ couchdb_admin_pass }} -X GET http://127.0.0.1:{{ couchdb_port }}/_all_dbs"
  register: couchdb_tables
  args:
    executable: /bin/bash

- name: Initializing State Database - services
  when: "'services' not in couchdb_tables.stdout"
  shell: python3 conf/StateDatabase/services.py
  args:
    chdir: "{{ serverless_containers_path }}"
    executable: /bin/bash

- name: Initializing State Database - create other tables
  when: "'events' not in couchdb_tables.stdout and 'requests' not in couchdb_tables.stdout and 'limits' not in couchdb_tables.stdout and 'structures' not in couchdb_tables.stdout"
  shell: python3 conf/StateDatabase/other_tables.py
  args:
    chdir: "{{ serverless_containers_path }}"
    executable: /bin/bash

- name: Initializing State Database - rules
  when: "'rules' not in couchdb_tables.stdout"
  shell: python3 conf/StateDatabase/rules.py
  args:
    chdir: "{{ serverless_containers_path }}"
    executable: /bin/bash

- name: Tmux session check
  shell: tmux ls
  register: tmux_output
  ignore_errors: yes
  tags: restart_services

# Starting Services
- name: Starting Services
  when: "item not in tmux_output.stdout"
  shell: "bash scripts/services/{{ item }}/start_tmux.sh"
  args:
    chdir: "{{ serverless_containers_path }}"
    executable: /bin/bash
  with_items:
    - orchestrator
    - database_snapshoter
    - structure_snapshoter
    - guardian
    - scaler
    - refeeder
    - sanity_checker
    - rebalancer
  tags: restart_services

- name: Starting Energy Services
  shell: "bash scripts/services/{{ item }}/start_tmux.sh"
  when: "power_budgeting and item not in tmux_output.stdout"
  args:
    chdir: "{{ serverless_containers_path }}"
    executable: /bin/bash
  with_items:
    - energy_manager
  tags: restart_services

# Start WattWizard when power_modelling is "yes"
- name: Starting WattWizard to create power models
  shell: "bash scripts/services/watt_wizard/start_tmux.sh"
  when: "power_budgeting and power_modelling and 'watt_wizard' not in tmux_output.stdout"
  args:
    chdir: "{{ serverless_containers_path }}"
    executable: /bin/bash
  tags: restart_services

# Start WattTrainer when online_learning is "yes"
- name: Starting WattTrainer to train power models in real time
  shell: "bash scripts/services/watt_trainer/start_tmux.sh"
  when: "power_budgeting and power_modelling and online_learning and 'watt_trainer' not in tmux_output.stdout"
  args:
    chdir: "{{ serverless_containers_path }}"
    executable: /bin/bash
  tags: restart_services

# - name: Getting container model names based on prediction methods and container train files
#   command: python3 -c "import itertools, sys; [print(v, end=' ') for v in [str(item[0]) + '_' + str(item[1]) for item in itertools.product(sys.argv[1].split(','), sys.argv[2].split(','))]]" {{ prediction_methods }} {{ container_train_files }}
#   register: container_models # e.g.: 'polyreg_Group_P' 'polyreg_Spread_P' 'sgdregressor_Group_P' 'sgdregressor_Spread_P'

# - name: Setting WattTrainer container models to train
#   shell: "bash scripts/orchestrator/WattTrainer/set_models_to_train.sh {{ container_models.stdout }}"
#   args:
#     chdir: "{{ serverless_containers_path }}"
#     executable: /bin/bash

## Hosts
- name: Initializing State Database - hosts
  shell: "python3 scripts/stateDatabase/add_hosts_API.py {{ item }} '{{ resources | to_json | safe }}' {{ disks }} config/config.yml"
  args:
    executable: /bin/bash
  vars:
    disks: "{{ hostvars[item].disks | replace(' ','') | quote }}"
    resources: "{{ {'cpu': hostvars[item].cpu, 'mem': hostvars[item].mem} | combine(({'energy': hostvars[item].energy} if power_budgeting else {})) }}"
  with_items: "{{ nodes }}"

- name: Initializing State Database - add individual disks to hosts
  shell: "python3 scripts/stateDatabase/add_disks_to_hosts.py {{ new_disks_dict }} config/config.yml"
  args:
    executable: /bin/bash
  vars:
    new_disks_dict: "{{ new_disks_dict_str | replace(' ','') | quote }}"
  tags: never, add_disks

- name: Initializing State Database - add disks to existing LV
  shell: "python3 scripts/stateDatabase/update_host_disks_bw_db.py {{ item }} lvm {{ hostvars[item].disks.lvm.bw }} MB/s config/config.yml"
  args:
    executable: /bin/bash
  with_items: "{{ nodes }}"
  tags: never, extend_lv

## Disable scaler service before adding containers
- name: Disabling Scaler service
  shell: "bash scripts/orchestrator/Scaler/deactivate.sh"
  args:
    chdir: "{{ serverless_containers_path }}"
    executable: /bin/bash
  tags: never, start_containers, disable_scaler

## Containers
- name: Initializing State Database - containers
  shell: "python3 scripts/stateDatabase/add_containers_API_v3.py {{ containers_info | replace(' ','') | quote }} config/config.yml"
  args:
    executable: /bin/bash
  tags: start_containers

## Reactivate Scaler after adding containers
- name: Activating Scaler service
  shell: "bash scripts/orchestrator/Scaler/activate.sh"
  args:
    chdir: "{{ serverless_containers_path }}"
    executable: /bin/bash
  tags: never, start_containers, enable_scaler

#- name: Guardian - Deactivating cpu and mem rules (Power Budgeting)
#  shell: bash scripts/orchestrator/Rules/deactivate_rule.sh {{ item }}
#  when: "power_budgeting"
#  args:
#    chdir: "{{ serverless_containers_path }}"
#    executable: /bin/bash
#  with_items:
#    - cpu_dropped_lower
#    - cpu_exceeded_upper
#    - CpuRescaleDown
#    - CpuRescaleUp
#    - mem_dropped_lower
#    - mem_exceeded_upper
#    - MemRescaleDown
#    - MemRescaleUp
#
#- name: Guardian - Ensuring that the energy rules are active
#  shell: bash scripts/orchestrator/Rules/activate_rule.sh {{ item }}
#  when: "power_budgeting"
#  args:
#    chdir: "{{ serverless_containers_path }}"
#    executable: /bin/bash
#  with_items:
#    - energy_dropped_lower
#    - energy_exceeded_upper
#    - EnergyRescaleDown
#    - EnergyRescaleUp

- name: Guardian - Setting guardable resources
  shell: "bash scripts/orchestrator/Guardian/set_guardable_resources.sh {{ resources }}"
  args:
    chdir: "{{ serverless_containers_path }}"
    executable: /bin/bash
  vars:
    resources: "{{ guardable_resources + (' energy' if power_budgeting else '') }}"
  
- name: Guardian - Set power model
  shell: "bash scripts/orchestrator/Guardian/set_energy_model.sh {{ guardian_default_model }}"
  when: "power_budgeting and power_modelling"
  args:
    chdir: "{{ serverless_containers_path }}"
    executable: /bin/bash

- name: Guardian - Activate power model use
  shell: "bash scripts/orchestrator/Guardian/activate_energy_model.sh"
  when: "power_budgeting and power_modelling"
  args:
    chdir: "{{ serverless_containers_path }}"
    executable: /bin/bash

## Activate Services
- name: Activating Services
  shell: "bash scripts/orchestrator/{{ item }}/activate.sh"
  args:
    chdir: "{{ serverless_containers_path }}"
    executable: /bin/bash
  with_items:
    - DatabaseSnapshoter
    - StructuresSnapshoter
    - Guardian
    - Scaler
    - Refeeder
    - Rebalancer
  tags: restart_services


