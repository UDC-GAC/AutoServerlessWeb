# Setup nodes
- name: Start containers in hosts
  hosts: nodes
  become: no
  gather_facts: no

  vars_files:
    - vars/main.yml
    - config/config.yml

  environment:
    BDWATCHDOG_PATH: "{{ bdwatchdog_path }}"
    SERVERLESS_PATH: "{{ serverless_containers_path }}"
    PYTHONPATH: "{{ bdwatchdog_path }}:{{ serverless_containers_path }}"

  tasks:
    - import_tasks: tasks/containers_setup/lxd_containers_setup.yml
      when: "container_engine == 'lxc'"
      tags: start_containers
      vars:
        - lxd_key_name: "lxd-{{ inventory_hostname }}"

    - import_tasks: "tasks/containers_setup/apptainer_containers_cgroups_{{ cgroups_version }}_setup.yml"
      when: "container_engine == 'apptainer'"
      vars:
        ## Base app: Software layer underlying to runnable apps, this layer includes BDWatchdog installation to monitor containers
        - app_base_name: "base" # "{{ app_name if install_script != '' else 'hadoop' if app_jar != '' else 'base' }}"
        - base_definition_file: "ubuntu_container.def"
        - app_base_image_file: "ubuntu_container.sif"
        ## Select app type
        - app_type: "{%- if install_script is defined and install_script != '' -%}generic_app
                   {%- elif app_jar is defined and app_jar != '' -%}hadoop_app
                   {%- else -%}base
                   {%- endif -%}"
        # All runnable apps except hadoop can use the same definition file (generic_app.def)
        #- definition_file: "{{ 'hadoop_app.def' if app_name == 'hadoop_app' else 'generic_app.def' }}"
        #- image_file: "{{ app_name }}.sif"
        #- app_directory: "apps/{{ app_install_dir }}"
        - definition_file: "{%- if app_type == 'generic_app' -%}generic_app.def
                          {%- elif app_type == 'hadoop_app' -%}hadoop_app.def
                          {%- else -%}{{ base_definition_file }}
                          {%- endif -%}"
        - image_file: "{%- if app_type == 'generic_app' -%}{{ app_dir }}.sif
                     {%- elif app_type == 'hadoop_app' -%}hadoop_app.sif
                     {%- else -%}{{ app_base_image_file }}
                     {%- endif -%}"
        - app_directory: "apps/{{ app_dir if app_type == 'generic_app' else app_type }}"
        # Other config
        - cgroups_file: "apptainer_containers_cgroup.toml"
        - containers_info_str: >
              {%- set containers_info=[] -%}
              {%- for host in groups['nodes'] -%}
                {%- for container_name in hostvars[host].containers -%}
                    {%- set container_info = dict() -%}
                    {{ container_info.update({'container_name': container_name, 'host': host, 'cpu_max': max_cpu_percentage_per_container, 'cpu_min': min_cpu_percentage_per_container, 'mem_max': max_memory_per_container, 'mem_min': min_memory_per_container }) }}
                    {%- if disk_capabilities and hostvars[host].disks|length > 0 -%}
                      {%- if create_lvm -%}
                        {{ container_info.update( {'disk': 'lvm', 'disk_path': hostvars[host].disks['lvm']['path']} ) }}
                      {%- else -%}
                        {%- set first_disk = hostvars[host].disks | first -%}
                        {{ container_info.update( {'disk': first_disk, 'disk_path': hostvars[host].disks[first_disk]['path']} ) }}
                      {%- endif -%}
                      {{ container_info.update( {'disk_max': max_diskbw_per_container, 'disk_min': min_diskbw_per_container}) }}
                    {%- endif -%}
                    {%- if power_budgeting -%}
                      {{ container_info.update({'energy_max': max_energy_per_container, 'energy_min': min_energy_per_container}) }}                      
                    {%- endif -%}
                    {{ containers_info.append(container_info) }}
                {%- endfor -%}
              {%- endfor -%}
              {{ containers_info }}
        - containers_info: "{{ containers_info_str | replace('\n','') | replace(' ','') }}"
        - master_container: "{{ (containers_info | first).container_name }}" # This container will act as RM/NM on distributed deployments with Hadoop/Spark

    - import_tasks: tasks/containers_setup/node_rescaler_launch.yml
      #become: "{{ 'no' if container_engine == 'apptainer' else 'yes' }}"

# Setup server (now that nodes have been initialized)
- hosts: localhost
  become: no
  gather_facts: no

  vars_files:
    - vars/main.yml
    - config/config.yml

  environment:
    BDWATCHDOG_PATH: "{{ bdwatchdog_path }}"
    SERVERLESS_PATH: "{{ serverless_containers_path }}"
    PYTHONPATH: "{{ bdwatchdog_path }}:{{ serverless_containers_path }}"

  tasks:
    - import_tasks: tasks/launch/couchdb_launch.yml
    - import_tasks: tasks/containers_setup/node_rescaler_containers_init.yml
      tags: 
        - start_containers
        - init_node_rescaler
      vars:
        - nodes: "{{ host_list | split(',') if host_list is defined else groups['nodes'] }}"
        - containers_info_str: >
              {%- set containers_info=[] -%}
              {%- for host in nodes -%}
                {%- for container_name in hostvars[host].containers -%}
                  {%- set container_info = dict() -%}
                    {{ container_info.update({'container_name': container_name, 'host': host, 'cpu_max': max_cpu_percentage_per_container, 'cpu_min': min_cpu_percentage_per_container, 'mem_max': max_memory_per_container, 'mem_min': min_memory_per_container }) }}
                    {%- if disk_scaling and hostvars[host].disks|length > 0 -%}
                      {{ container_info.update( {'disk_max': max_diskbw_per_container, 'disk_min': min_diskbw_per_container}) }}
                    {%- endif -%}
                    {%- if power_budgeting -%}
                      {{ container_info.update({'energy_max': max_energy_per_container, 'energy_min': min_energy_per_container}) }}
                    {%- endif -%}                      
                    {{ containers_info.append(container_info) }}
                {%- endfor -%}
              {%- endfor -%}
              {{ containers_info }}
        - resources: "{{ ['cpu', 'mem'] + (['disk'] if disk_capabilities else []) + (['energy'] if power_budgeting else []) }}"
        - containers_info: "{{ containers_info_str | replace('\n','') | replace(' ','') }}"