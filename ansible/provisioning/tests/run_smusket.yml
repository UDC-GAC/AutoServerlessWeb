# Start an app on a container
- hosts: nodes
  become: no
  gather_facts: no

  vars_files:
    - ../vars/main.yml
    - ../config/config.yml

  vars:
    - containers_info_str: >
        {%- set containers_info=[] -%}
        {%- for host in groups['nodes'] -%}
          {%- for container_name in hostvars[host].containers -%}
              {%- set container_info = dict() -%}
              {{ container_info.update({'container_name': container_name, 'host': host, 'cpu_max': max_cpu_percentage_per_container, 'cpu_min': min_cpu_percentage_per_container, 'mem_max': max_memory_per_container, 'mem_min': min_memory_per_container }) }}
              {%- if hostvars[host].disks|length > 0 -%}
                {%- if create_lvm -%}
                  {{ container_info.update( {'disk': 'lvm', 'disk_path': hostvars[host].disks['lvm']['path']} ) }}
                {%- else -%}
                  {%- set disk = 'ssd_0' -%}
                  {{ container_info.update( {'disk': disk, 'disk_path': hostvars[host].disks[disk]['path']} ) }}
                {%- endif -%}
                {{ container_info.update( {'disk_max': max_diskbw_per_container, 'disk_min': min_diskbw_per_container}) }}
              {%- endif -%}
              {%- if power_budgeting -%}
                {{ container_info.update({'energy_max': max_energy_per_container, 'energy_min': min_energy_per_container}) }}                      
              {%- endif -%}
              {{ containers_info.append(container_info) }}
          {%- endfor -%}
        {%- endfor -%}
        {{ containers_info }}
    - containers_info: "{{ containers_info_str | replace('\n','') | replace(' ','') }}"
    - master_container: "{{ (containers_info | first).container_name }}"
    - master_host: "{{ (containers_info | first).host }}"
    - smusket_input: "{{ lookup('env', 'HOME') }}/ERR031558.fastq"

  environment:
    BDWATCHDOG_PATH: "{{ bdwatchdog_path }}"
    RESCALING_PATH: "{{ serverless_containers_path }}/scripts/"
    PYTHONPATH: ":{{ serverless_containers_path }}"

  ## Singularity + cgroups v1
  tasks:

    ## Debug
    - name: Debug containers info
      debug:
        msg: "{{ (containers_info | first).container_name  }}"
      tags: never, debug_containers


    ## Setup network
    - name: Setup network on containers
      block:
        - name: Get containers IP addresses
          shell: "
          {% for item in containers_info %}
            {% if item.host == inventory_hostname %}
              sudo {{ singularity_command_alias }} exec instance://{{ item.container_name }} bash -c \"printf '%s ' \\$(hostname -I | awk '{print \\$1}') && hostname\" && 
            {% endif  %}
          {% endfor %}true"
          args:
            executable: /bin/bash
          register: ip_addresses

        - name: Update hostname resolution in containers
          shell: "
          {% for item in containers_info %}
            {% if item.host == inventory_hostname %}
              sudo {{ singularity_command_alias }} exec instance://{{ item.container_name }} bash -c \
              'cp /etc/hosts {{ bind_dir_on_container }} \
              && {% for cont_ip in resolution_list.split('\n') | select() %}sed -i '\\''1s/^/{{ cont_ip }}\\n/'\\'' {{ bind_dir_on_container }}/hosts && {% endfor %}true \
              && cat {{ bind_dir_on_container }}/hosts > /etc/hosts \
              && rm {{ bind_dir_on_container }}/hosts' && 
            {% endif  %}
          {% endfor %}true"
          args:
            executable: /bin/bash
          vars:
            iface_ip_list: "{{ ansible_play_hosts | map('extract', hostvars, 'ip_addresses') | list }}"
            resolution_list: "{% for result in iface_ip_list | flatten(levels=1) %}{{ result.stdout }}\n{% endfor %}"

      tags: never, setup_network

    ## Setup SSH
    - name: Setup SSH on containers
      block:
        - name: Setup passwordless SSH on each container
          shell: "
           {% for item in containers_info %}
             {% if item.host == inventory_hostname %}
               sudo {{ singularity_command_alias }} exec instance://{{ item.container_name }} bash -c \ 
               'bash /opt/{{ app_name }}/setup.sh' && 
             {% endif  %}
           {% endfor %}true"
          args:
            executable: /bin/bash

        - name: Setup worker containers list on master container
          when: master_host == inventory_hostname
          shell: "sudo {{ singularity_command_alias }} exec instance://{{ master_container }} bash -c \ 
            'rm -f {{ bind_dir_on_container }}/workers && \
            {% for item in worker_list %}
              echo {{ item }} >> {{ bind_dir_on_container }}/workers && 
            {% endfor %}true'"
          args:
            executable: /bin/bash
          vars:
            worker_list: "{{ containers_info | map(attribute='container_name') | reject('search', master_container) | list}}"

        - name: Update ssh known_hosts on master container with worker keys
          when: master_host == inventory_hostname
          shell: "sudo {{ singularity_command_alias }} exec instance://{{ master_container }} bash -c \
          'ssh-keyscan -t rsa -f {{ bind_dir_on_container }}/workers >> ~/.ssh/known_hosts'"
          args:
            executable: /bin/bash

        - name: Copy master container public key to bind directory
          when: master_host == inventory_hostname
          shell: "sudo {{ singularity_command_alias }} exec instance://{{ master_container }} bash -c \
          'cp ~/.ssh/id_rsa.pub {{ bind_dir_on_container }}/{{ master_container }}.pub'"
          args:
            executable: /bin/bash

        - name: Set master disk path
          when: item.container_name == master_container
          set_fact:
            master_disk_path: "{{ item.disk_path }}"
          loop: "{{ containers_info }}"

        - name: Copy master public key from bind dir to app directory
          when: master_host == inventory_hostname
          synchronize:
            src: "{{ bind_dir }}/{{ master_container }}/{{ master_container }}.pub"
            dest: "{{ installation_path }}/apps/{{ app_name }}/{{ master_container }}.pub"
            mode: pull
          vars:
            bind_dir: "{{ master_disk_path + '/' + bind_dir_name if master_disk_path is defined else default_bind_path + '/' + bind_dir_name }}"

        - name: Synchronize master public key with all the other hosts
          synchronize:
            src: "{{ installation_path }}/apps/{{ app_name }}/{{ master_container }}.pub"
            dest: "{{ installation_path }}/apps/{{ app_name }}/{{ master_container }}.pub"

        - name: Copy master public key to the other containers and add to authorized keys
          shell: "
          {% for item in containers_info %}
            {% if item.host == inventory_hostname and item.container_name != master_container %}
              {% set bind_dir = item.disk_path + '/' + bind_dir_name if item.disk_path is defined else default_bind_path + '/' + bind_dir_name %}
              cp {{ installation_path }}/apps/{{ app_name }}/{{ master_container }}.pub {{ bind_dir }}/{{ item.container_name }}/{{ master_container }}.pub && \
              sudo {{ singularity_command_alias }} exec instance://{{ item.container_name }} bash -c \
              'cat {{ bind_dir_on_container }}/{{ master_container }}.pub >> ~/.ssh/authorized_keys \
              && rm {{ bind_dir_on_container }}/{{ master_container }}.pub' && 
            {% endif  %}
          {% endfor %}true"
          args:
            executable: /bin/bash

      tags: never, setup_ssh

    ## Setup Spark
    - name: Setup Spark master and workers
      block:

        - name: Clean any existent Hadoop file from previous installations
          shell: "
          {% for item in containers_info %}
            {% if item.host == inventory_hostname %}
              sudo {{ singularity_command_alias }} exec instance://{{ item.container_name }} bash -c 'rm -rf {{ bind_dir_on_container}}/hadoop' &&
            {% endif  %}
          {% endfor %}true"
          args:
            executable: /bin/bash

        - name: Create Hadoop directories and copy configuration
          shell: "
          {% for item in containers_info %}
            {% if item.host == inventory_hostname %}
              sudo {{ singularity_command_alias }} exec instance://{{ item.container_name }} bash -c \
              'source /opt/{{ app_name }}/files_dir/get-env.sh && \
              mkdir -p ${HADOOP_CONF_DIR} ${HADOOP_LOG_DIR} ${HADOOP_NAMENODE_DIR} ${HADOOP_DATANODE_DIR} ${HADOOP_NODEMANAGER_DIR} && \
              cp -r ${HADOOP_HOME}/etc/hadoop/* ${HADOOP_CONF_DIR}' && 
            {% endif  %}
          {% endfor %}true"
          args:
            executable: /bin/bash

        - name: Clean any existent Spark file from previous installations
          shell: "
          {% for item in containers_info %}
            {% if item.host == inventory_hostname %}
              sudo {{ singularity_command_alias }} exec instance://{{ item.container_name }} bash -c 'rm -rf {{ bind_dir_on_container}}/spark' &&
            {% endif  %}
          {% endfor %}true"
          args:
            executable: /bin/bash

        - name: Create Spark directories and copy configuration
          shell: "
          {% for item in containers_info %}
            {% if item.host == inventory_hostname and item.container_name %}
              sudo {{ singularity_command_alias }} exec instance://{{ item.container_name }} bash -c \
              'source /opt/{{ app_name }}/files_dir/get-env.sh && \
              mkdir -p ${SPARK_CONF_DIR} ${SPARK_LOG_DIR} ${SPARK_DATA_DIR} ${SPARK_WORKER_DIR} && \
              cp /opt/{{ app_name }}/files_dir/spark/* ${SPARK_CONF_DIR}' && 
            {% endif  %}
          {% endfor %}true"
          args:
            executable: /bin/bash

        - name: Format filesystem, start HDFS and YARN (Master)
          when: master_host == inventory_hostname
          shell: "sudo {{ singularity_command_alias }} exec instance://{{ master_container }} bash -c \
          'source /opt/{{ app_name }}/files_dir/get-env.sh && \
           ${HADOOP_HOME}/bin/hdfs namenode -format -force && \
           (nohup ${HADOOP_HOME}/bin/hdfs --daemon start namenode & \
           nohup ${HADOOP_HOME}/bin/yarn --daemon start resourcemanager &)'"
          args:
            executable: /bin/bash

        - name: Start HDFS and YARN (Worker)
          shell: "
          {% for item in containers_info %}
            {% if item.host == inventory_hostname and item.container_name != master_container %}
              sudo {{ singularity_command_alias }} exec instance://{{ item.container_name }} bash -c \
              'source /opt/{{ app_name }}/files_dir/get-env.sh && \
               (nohup ${HADOOP_HOME}/bin/hdfs --daemon start datanode & \
               nohup ${HADOOP_HOME}/bin/yarn --daemon start nodemanager &)' && 
            {% endif  %}
          {% endfor %}true"
          args:
            executable: /bin/bash

        - name: Wait some seconds for Namenode to exit safe mode
          pause:
            seconds: 10

        - name: Start Spark master daemon in master container
          when: master_host == inventory_hostname
          shell: "
          sudo {{ singularity_command_alias }} exec instance://{{ master_container }} bash -c \
          'source /opt/{{ app_name }}/files_dir/get-env.sh && \
          nohup bash ${SPARK_HOME}/sbin/start-master.sh &'"
          args:
            executable: /bin/bash

        - name: Start Spark worker daemon on worker containers
          shell: "
          {% for item in containers_info %}
            {% if item.host == inventory_hostname and item.container_name != master_container %}
              sudo {{ singularity_command_alias }} exec instance://{{ item.container_name }} bash -c \
              'source /opt/{{ app_name }}/files_dir/get-env.sh && \
              nohup bash ${SPARK_HOME}/sbin/start-worker.sh spark://{{ master_container }}:7077 &' &&
            {% endif  %}
          {% endfor %}true"
          args:
            executable: /bin/bash

      tags: never, setup_spark

    ## Start
    - name: Start app on container
      block:

        - name: Set master disk path
          when: item.container_name == master_container
          set_fact:
            master_disk_path: "{{ item.disk_path }}"
          loop: "{{ containers_info }}"

        - name: Check if SMusket input was already copied
          when: master_host == inventory_hostname
          stat:
            path: "{{ bind_dir }}/{{ master_container }}/{{ smusket_input | basename }}"
            get_checksum: false
            get_mime: false
            get_attributes: false
          register: stat_output
          vars:
            bind_dir: "{{ master_disk_path + '/' + bind_dir_name if master_disk_path is defined else default_bind_path + '/' + bind_dir_name }}"

        - name: Copy Smusket input to master container bind directory
          when: master_host == inventory_hostname and not stat_output.stat.exists
          copy:
            src: "{{ smusket_input }}"
            dest: "{{ bind_dir }}/{{ master_container }}/{{ smusket_input | basename }}"
          vars:
            bind_dir: "{{ master_disk_path + '/' + bind_dir_name if master_disk_path is defined else default_bind_path + '/' + bind_dir_name }}"

        # For some weird reason 'nohup bash...' didn't work without the '> nohup.out 2>&1'
        - name: Execute start script on master container
          when: master_host == inventory_hostname
          shell: "sudo {{ singularity_command_alias }} exec instance://{{ master_container }} bash -c 'nohup bash /opt/{{ app_name }}/start.sh > nohup.out 2>&1 &'"
          args:
            executable: /bin/bash

      tags: never, start_app

    ## Stop
    - name: Stop app on container
      block:
        - name: get the user id running the deploy
          become: no
          local_action: command id -u
          register: userid_on_the_host

        # TODO: Clean Spark and Hadoop files and copy interesting logs to host

        - name: Execute stop script on master container
          shell: "sudo {{ singularity_command_alias }} exec instance://{{ master_container }} nohup bash /opt/{{ app_name }}/stop.sh &"
          args:
            executable: /bin/bash

      tags: never, stop_app

    ## Stop Spark
    - name: Stop Spark cluster
      block:
        - name: Stop worker instances
          shell: "
          {% for item in containers_info %}
            {% if item.host == inventory_hostname and item.container_name != master_container %}
              sudo {{ singularity_command_alias }} exec instance://{{ item.container_name }} bash -c \
              'source /opt/{{ app_name }}/files_dir/get-env.sh && \
              bash ${SPARK_HOME}/sbin/stop-worker.sh' && 
            {% endif  %}
          {% endfor %}true"
          args:
            executable: /bin/bash

        - name: Stop master instance
          when: master_host == inventory_hostname
          shell: "
          sudo {{ singularity_command_alias }} exec instance://{{ master_container }} bash -c \
          'source /opt/{{ app_name }}/files_dir/get-env.sh && \
          bash ${SPARK_HOME}/sbin/stop-master.sh'"
          args:
            executable: /bin/bash

      tags: never, stop_spark
